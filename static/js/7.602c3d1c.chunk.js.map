{"version":3,"sources":["components/common/FormControls/FormControls.js","utils/validators/validators.js","components/common/FormControls/FormControls.module.css","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["FormArea","props","hasError","touched","error","className","s","formControl","children","TextArea","input","meta","Input","createField","placeholder","name","validate","component","type","required","value","maxLength","max","length","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","src","alt","connect","state","isAuth","auth","loginThunk","to","content","title","payload","email","password","rememberMe","captcha"],"mappings":"+QAIMA,EAAW,SAAC,GAAkB,IAAbC,EAAY,oBACzBC,EAAWD,EAAME,SAAWF,EAAMG,MACxC,OAAO,sBAAKC,UAAWH,EAAWI,IAAEC,YAAc,IAAMD,IAAEF,MAAQE,IAAEC,YAA7D,UACFN,EAAMO,SACNN,GAAY,qBAAKG,UAAWC,IAAEC,YAAc,IAAMD,IAAEF,MAAxC,SAA+C,+BAAOH,EAAMG,cAIpEK,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASV,EAAY,gCACnD,OAAO,cAACD,EAAD,2BAAcW,GAAd,aAAoB,oDAAcD,GAAWT,QAG3CW,EAAQ,SAAC,GAA+B,IAA7BF,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASV,EAAY,gCAChD,OAAO,cAACD,EAAD,2BAAcW,GAAd,aAAoB,iDAAWD,GAAWT,QAIxCY,EAAc,SAACC,EAAaC,EAAMC,EAAUC,GAErD,OAAO,cAAC,IAAD,CAAOH,YAAaA,EAAaC,KAAMA,EAC1CC,SAAUA,EAAUE,KAAI,wCACxBD,UAAWA,M,iCCvBnB,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAGA,EACH,MAAO,mBAGEC,EAAY,SAACC,GAAD,OAAS,SAACF,GAE/B,GAAGA,GAASA,EAAMG,OAASD,EAAK,MAAM,sBAAN,OAA6BA,EAA7B,e,oBCRpCE,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,oBCA1ED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,uB,iCCDnH,4FA8BMC,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAnBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAczB,EAAuB,EAAvBA,MAAO0B,EAAgB,EAAhBA,WACrC,OAAO,8BACH,uBAAMC,SAAUF,EAAcxB,UAAWC,IAAEsB,KAA3C,UACI,8BAAMf,YAAY,WAAY,QAAS,CAAEM,KAAYP,IAAO,UAC5D,8BAAMC,YAAY,cAAe,WAAY,CAAEM,KAAYP,IAAO,cAClE,+CACA,8BAAMC,YAAY,KAAM,aAAc,GAAID,IAAO,cAE/CkB,GAAc,gCACZ,qBAAKE,IAAKF,EAAYG,IAAI,YACzBpB,YAAY,6BAA8B,UAAW,CAAEM,KAAYP,QAGtER,GAAS,qBAAKC,UAAWC,IAAEsB,KAAO,IAAMtB,IAAEF,MAAjC,SAAyCA,IACpD,8BAAK,uDAwBF8B,uBAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBN,WAAYK,EAAME,KAAKP,cAIS,CAAEQ,gBAA3BJ,EAjBD,SAACjC,GAIX,OAAGA,EAAMmC,OAAe,cAAC,WAAD,CAAUG,GAAG,aAC9B,sBAAKlC,UAAWC,IAAEkC,QAAlB,UACH,qBAAKnC,UAAWC,IAAEmC,MAAlB,mBACA,cAACf,EAAD,CAAgBK,SANH,SAACW,GACdzC,EAAMqC,WAAWI,EAAQC,MAAOD,EAAQE,SAAUF,EAAQG,WAAYH,EAAQI,UAK1ChB,WAAY7B,EAAM6B","file":"static/js/7.602c3d1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport s from './FormControls.module.css';\r\n\r\nconst FormArea = ({ ...props }) => {\r\n    const hasError = props.touched && props.error;\r\n    return <div className={hasError ? s.formControl + ' ' + s.error : s.formControl}>\r\n        {props.children}\r\n        {hasError && <div className={s.formControl + ' ' + s.error}><span>{props.error}</span></div>}\r\n    </div>;\r\n}\r\n\r\nexport const TextArea = ({ input, meta, ...props }) => {\r\n    return <FormArea {...meta}><textarea {...input} {...props}></textarea></FormArea>;\r\n};\r\n\r\nexport const Input = ({ input, meta, ...props }) => {\r\n    return <FormArea {...meta}><input {...input} {...props} /></FormArea>;\r\n};\r\n\r\n\r\nexport const createField = (placeholder, name, validate, component, ...restProps) => {\r\n    \r\n    return <Field placeholder={placeholder} name={name}\r\n        validate={validate} type={restProps[0]}\r\n        component={component} />\r\n};","\r\n\r\nexport const required = (value) => {\r\n    if(value) return undefined;\r\n    return \"Field is empty!\";\r\n};\r\n//Не понимаю, что не так...\r\nexport const maxLength = (max) => (value) => {\r\n\r\n    if(value && value.length > max) return `Field is more than ${max} symbols`;\r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1JQEi\",\"error\":\"FormControls_error__f71V9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Login_content__37FgI\",\"form\":\"Login_form__2jdhr\",\"error\":\"Login_error__AV455\",\"title\":\"Login_title__2xSGI\"};","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, createField } from '../common/FormControls/FormControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { loginThunk } from './../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return <div>\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <div>{createField(\"Email...\", \"email\", [ required ], Input, \"text\")}</div>\r\n            <div>{createField(\"Password...\", \"password\", [ required ], Input, \"password\")}</div>\r\n            <span>Remember me</span>\r\n            <div>{createField(null, \"rememberMe\", [], Input, \"checkbox\")}</div>\r\n\r\n            { captchaUrl && <div>\r\n                <img src={captchaUrl} alt=\"captcha\" />\r\n                {createField(\"Type symbols from image...\", \"captcha\", [ required ], Input )}\r\n            </div> }\r\n\r\n            { error && <div className={s.form + ' ' + s.error}>{error}</div>}\r\n            <div><button>Sign In</button></div>\r\n        </form>\r\n    </div>;\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({form: \"login\"})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (payload) => {\r\n        props.loginThunk(payload.email, payload.password, payload.rememberMe, payload.captcha);\r\n    }\r\n    if(props.isAuth) return <Redirect to=\"/Profile\" />\r\n    return <div className={s.content}>\r\n        <div className={s.title}>Login</div>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>;\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    };\r\n};\r\n//Обернуть container component от hoc connect\r\nexport default connect(mapStateToProps, { loginThunk })(Login);   "],"sourceRoot":""}